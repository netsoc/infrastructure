#!/usr/bin/nft -f
flush ruleset

define lan_net = 10.69.0.0/16
define vpn_net = 10.79.0.0/24

define firewall = 10.69.0.1
define firewall_public = 134.226.83.42

define mail_host = 10.69.2.1
define ns1 = 134.226.83.27

define wireguard = 51820
define iperf3 = 5201
define mail_ports = { smtp, submissions, submission, imap, imaps, pop3, pop3s, sieve }

table inet filter {
  chain wan-tcp {
    tcp dport ssh accept
    tcp dport $iperf3 accept
  }
  chain wan-udp {
    udp dport $wireguard accept
    udp dport $iperf3 accept
  }

  chain wan {
    # ICMP & IGMP
    ip6 nexthdr icmpv6 icmpv6 type {
      destination-unreachable,
      packet-too-big,
      time-exceeded,
      parameter-problem,
      mld-listener-query,
      mld-listener-report,
      mld-listener-reduction,
      nd-router-solicit,
      nd-router-advert,
      nd-neighbor-solicit,
      nd-neighbor-advert,
      ind-neighbor-solicit,
      ind-neighbor-advert,
      mld2-listener-report,
      echo-request
    } accept
    ip protocol icmp icmp type {
      destination-unreachable,
      router-solicitation,
      router-advertisement,
      time-exceeded,
      parameter-problem,
      echo-request
    } accept
    ip protocol igmp accept

    # separate chains for TCP / UDP
    ip protocol tcp tcp flags & (fin|syn|rst|ack) == syn ct state new jump wan-tcp
    ip protocol udp ct state new jump wan-udp
    ip protocol esp accept
  }

  chain filter-port-forwards {
    ip daddr $mail_host tcp dport $mail_ports accept

    ip daddr $ns1 udp dport domain accept
    ip daddr $ns1 tcp dport domain accept
  }

  chain input {
    type filter hook input priority 0; policy drop;

    # established/related connections
    ct state established,related accept

    # invalid connections
    ct state invalid drop

    # allow all from loopback / lan
    iif lo accept
    iifname { eth0, lan, vpn } accept

    iifname wan jump wan
  }
  chain forward {
    type filter hook forward priority 0; policy drop;

    # see comment on same rule in output chain
    oifname wan tcp flags { syn, rst } tcp option maxseg size set 1000

    # lan can go anywhere
    iifname { eth0, lan, vpn } accept

    iifname wan oifname { lan, wan } ct state related,established accept
    iifname wan oifname { lan, wan } jump filter-port-forwards
  }
  chain output {
    type filter hook output priority 0; policy accept;

    # something is weird with downstream networking in maths, clamping the mss
    # greatly reduces loss and improves tcp bandwidth
    oifname wan tcp flags { syn, rst } tcp option maxseg size set 1000
  }
}

table nat {
  chain port-forward {
    tcp dport $mail_ports dnat $mail_host

    # Hack for a "second nameserver"
    ip daddr $firewall_public udp dport domain dnat $ns1
    ip daddr $firewall_public tcp dport domain dnat $ns1
  }
  chain prerouting {
    type nat hook prerouting priority 0;

    iifname wan jump port-forward
    iifname lan ip daddr { $firewall, $firewall_public } jump port-forward
  }

  chain lan-port-forwarding {
    ip daddr $mail_host tcp dport $mail_ports snat $firewall_public
  }
  chain postrouting {
    type nat hook postrouting priority 100;

    oifname wan counter masquerade
    oifname lan ip saddr $lan_net jump lan-port-forwarding
    oifname lan ip saddr $vpn_net snat $firewall
  }
}

# vim:set ts=2 sw=2 et:
